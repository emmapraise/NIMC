# Generated by Django 4.0.4 on 2022-07-08 14:06

import api.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=11, unique=True)),
                ('middle_name', models.CharField(blank=True, max_length=25, null=True)),
                ('nin', models.CharField(max_length=20, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='NIMC/static/images')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('is_citizen', models.BooleanField(blank=True, default=False, null=True)),
                ('is_admin', models.BooleanField(blank=True, default=False, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(blank=True, choices=[('Local Government', 'Local Government'), ('State Government', 'State Government'), ('Federal Government', 'Federal Government')], max_length=30, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Citizen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now=True, null=True)),
                ('type', models.CharField(choices=[('Old National ID Card', 'Old National ID Card'), ('Driver’s License', 'Driver’s License'), ('Voter’s card (Temporary or Permanent)', 'Voter’s card (Temporary or Permanent)'), ('Nigerian International passport', 'Nigerian International passport'), ('Certificate of Origin', 'Certificate of Origin'), ('Curriculum Vitae', 'Curriculum Vitae'), ('Certificate', 'Certificate'), ('Transcript', 'Transcript')], max_length=100)),
                ('path', models.FileField(upload_to='NIMC/static/documents')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NinInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('state_of_origin', models.CharField(max_length=30)),
                ('address', models.TextField()),
                ('marital_status', models.CharField(blank=True, choices=[('Single', 'Single'), ('Married', 'Married'), ('Divoreced', 'Divoreced')], max_length=30, null=True)),
                ('blood_group', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('AB', 'AB'), ('O', 'O')], max_length=10, null=True)),
                ('genotype', models.CharField(blank=True, choices=[('AA', 'AA'), ('AS', 'AS'), ('AC', 'AC'), ('SS', 'SS')], max_length=2, null=True)),
                ('next_of_kin', models.CharField(max_length=100)),
                ('next_of_kin_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('next_of_kin_phone', models.TextField(blank=True, max_length=11, null=True)),
                ('next_of_kin_address', models.TextField()),
                ('occupation', models.CharField(max_length=100)),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.citizen')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('field', models.CharField(max_length=100)),
                ('old_value', models.CharField(max_length=250)),
                ('new_value', models.CharField(max_length=250)),
                ('document_path', models.FileField(upload_to='documents/')),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Disapproved'), (2, 'Verified'), (3, 'Approved')], default=0)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.admin')),
                ('nin_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.nininfo')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProfessionalDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('year_of_achievement', models.CharField(max_length=4)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EncodedImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now=True, null=True)),
                ('encodings', models.TextField()),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.citizen')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EducationDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now=True, null=True)),
                ('highest_education', models.CharField(choices=[('Primary Education', 'Primary Education'), ('Secondary Education', 'Secondary Education'), ('Ordinary National Diploma', 'Ordinary National Diploma'), ('Higher National Diploma', 'Higher National Diploma'), ('Degree', 'Degree'), ('Masters', 'Masters'), ('Doctor of Philosophy', 'Doctor of Philosophy')], max_length=100)),
                ('name_of_school', models.CharField(blank=True, max_length=200, null=True)),
                ('year_of_graduation', models.CharField(max_length=4)),
                ('class_of_graduation', models.CharField(choices=[('First class', 'First Class'), ('Second class upper', 'Second Class Upper'), ('Second class lower', 'Second Class Lower'), ('Third class', 'Third Class'), ('Pass', 'Pass')], max_length=20)),
                ('country_of_graduation', models.CharField(max_length=20)),
                ('certificate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='education_certificate', to='api.document')),
                ('transcript', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='education_transcript', to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='document',
            name='nin_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.nininfo'),
        ),
        migrations.CreateModel(
            name='CertificateDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_at', models.DateTimeField(auto_now=True, null=True)),
                ('certificate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificate', to='api.document')),
                ('transcript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transcript', to='api.document')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
